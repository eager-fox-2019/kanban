{"remainingRequest":"/home/rizkyanas25/Hacktiv8/phase2/week3/3wednesday/kanban/kanban/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/rizkyanas25/Hacktiv8/phase2/week3/3wednesday/kanban/kanban/src/components/TaskCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/rizkyanas25/Hacktiv8/phase2/week3/3wednesday/kanban/kanban/src/components/TaskCard.vue","mtime":1558261008909},{"path":"/home/rizkyanas25/Hacktiv8/phase2/week3/3wednesday/kanban/kanban/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rizkyanas25/Hacktiv8/phase2/week3/3wednesday/kanban/kanban/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rizkyanas25/Hacktiv8/phase2/week3/3wednesday/kanban/kanban/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/rizkyanas25/Hacktiv8/phase2/week3/3wednesday/kanban/kanban/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/home/rizkyanas25/Hacktiv8/phase2/week3/3wednesday/kanban/kanban/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rizkyanas25/Hacktiv8/phase2/week3/3wednesday/kanban/kanban/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Swal from 'sweetalert2'\nimport db from '@/api/firebase.js'\n\nexport default {\n  props: ['task'],\n  data () {\n    return {\n\n    }\n  },\n  methods: {\n    showDetails () {\n      Swal.fire({\n        title: `${this.task.title}`,\n        html:\n          `\n          <div style=\"margin: auto; width:100%; font-size:20px; !important\">\n            <div style=\"margin-bottom:10px\">\n              <h4>Description: </h4>\n              <p>${this.task.description}</p>\n            </div>\n            <v-divider></v-divider>\n            <h5>Point: ${this.task.point}</h5>\n            <h5>Assigned to: ${this.task.assignedTo}</h5>\n            <h5 class=\"\">Status: ${this.task.status}</h5>\n          </div>`,\n        focusConfirm: false,\n        confirmButtonText: 'Back',\n        confirmButtonAriaLabel: 'Back'\n      })\n    },\n    deleteTask (id) {\n      Swal.fire({\n        title: `Delete \"${this.task.title}\"?`,\n        text: \"You won't be able to revert this!\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes, delete it!'\n      }).then((result) => {\n        if (result.value) {\n          Swal.fire(\n            'Deleted!',\n            'The task has been deleted.',\n            'success'\n          )\n          db.collection('tasks').doc(id).delete()\n            .then(function () {\n              console.log('Document successfully deleted!')\n            })\n            .catch(function (error) {\n              console.error('Error removing document: ', error)\n            })\n        }\n      })\n    },\n    right (id) {\n      let status = ''\n      if (this.task.status === 'plan') {\n        status = 'todo'\n      } else if (this.task.status === 'todo') {\n        status = 'ongoing'\n      } else if (this.task.status === 'ongoing') {\n        status = 'done'\n      }\n      const Toast = Swal.mixin({\n        toast: true,\n        position: 'center',\n        showConfirmButton: false,\n        timer: 2000\n      })\n      Toast.fire({\n        type: 'success',\n        html: `\n        <h2 class=\"mx-3\">Moved \"${this.task.title}\" to \"${status}\" list</h2>`\n      })\n      db.collection('tasks').doc(id)\n        .update({\n          status: status\n        })\n        .then(function () {\n          console.log('Document successfully updated!')\n        })\n    },\n    left (id) {\n      let status = ''\n      if (this.task.status === 'todo') {\n        status = 'plan'\n      } else if (this.task.status === 'ongoing') {\n        status = 'todo'\n      } else if (this.task.status === 'done') {\n        status = 'ongoing'\n      }\n      const Toast = Swal.mixin({\n        toast: true,\n        position: 'center',\n        showConfirmButton: false,\n        timer: 1000\n      })\n      Toast.fire({\n        type: 'success',\n        html: `\n        <h2 class=\"mx-3\">Moved \"${this.task.title}\" to \"${status}\" list</h2>`\n      })\n      db.collection('tasks').doc(id)\n        .update({\n          status: status\n        })\n        .then(function () {\n          console.log('Document successfully updated!')\n        })\n    }\n  }\n}\n",{"version":3,"sources":["TaskCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TaskCard.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-card color=\"white\" class=\"black--text\">\n    <v-layout>\n      <v-flex>\n        <v-card-title primary-title>\n          <div class=\"headline mx-2\">{{task.title}}</div>\n        </v-card-title>\n      </v-flex>\n    </v-layout>\n    <v-divider></v-divider>\n    <div class=\"my-1 mx-4\">Point : {{task.point}}</div>\n    <div class=\"my-1 mx-4\">Assigned by : {{task.assignedTo}}</div>\n    <div style=\"width:230px; margin-left:10px\">\n      <div>\n        <v-btn v-if=\"task.status === 'plan'\" small disabled class=\"mx-3\"><i class=\"fas fa-arrow-circle-left\"></i></v-btn>\n        <v-btn v-if=\"task.status !== 'plan'\" v-on:click=\"left(task.id)\" dark small color=\"blue\" class=\"mx-3\"><i class=\"fas fa-arrow-circle-left\"></i></v-btn>\n        <v-btn v-if=\"task.status === 'done'\" small disabled class=\"\"><i class=\"fas fa-arrow-circle-right\"></i></v-btn>\n        <v-btn v-if=\"task.status !== 'done'\" v-on:click=\"right(task.id)\" dark small color=\"blue\" class=\"\"><i class=\"fas fa-arrow-circle-right\"></i></v-btn>\n      </div>\n      <div>\n        <v-btn v-on:click=\"showDetails\" dark small color=\"teal\" class=\"mx-3\" style=\"margin-bottom:20px\">Detail</v-btn>\n        <v-btn v-on:click=\"deleteTask(task.id)\" dark small color=\"red\" class=\"\" style=\"margin-bottom:20px\">Delete</v-btn>\n      </div>\n    </div>\n  </v-card>\n</template>\n\n<script>\nimport Swal from 'sweetalert2'\nimport db from '@/api/firebase.js'\n\nexport default {\n  props: ['task'],\n  data () {\n    return {\n\n    }\n  },\n  methods: {\n    showDetails () {\n      Swal.fire({\n        title: `${this.task.title}`,\n        html:\n          `\n          <div style=\"margin: auto; width:100%; font-size:20px; !important\">\n            <div style=\"margin-bottom:10px\">\n              <h4>Description: </h4>\n              <p>${this.task.description}</p>\n            </div>\n            <v-divider></v-divider>\n            <h5>Point: ${this.task.point}</h5>\n            <h5>Assigned to: ${this.task.assignedTo}</h5>\n            <h5 class=\"\">Status: ${this.task.status}</h5>\n          </div>`,\n        focusConfirm: false,\n        confirmButtonText: 'Back',\n        confirmButtonAriaLabel: 'Back'\n      })\n    },\n    deleteTask (id) {\n      Swal.fire({\n        title: `Delete \"${this.task.title}\"?`,\n        text: \"You won't be able to revert this!\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes, delete it!'\n      }).then((result) => {\n        if (result.value) {\n          Swal.fire(\n            'Deleted!',\n            'The task has been deleted.',\n            'success'\n          )\n          db.collection('tasks').doc(id).delete()\n            .then(function () {\n              console.log('Document successfully deleted!')\n            })\n            .catch(function (error) {\n              console.error('Error removing document: ', error)\n            })\n        }\n      })\n    },\n    right (id) {\n      let status = ''\n      if (this.task.status === 'plan') {\n        status = 'todo'\n      } else if (this.task.status === 'todo') {\n        status = 'ongoing'\n      } else if (this.task.status === 'ongoing') {\n        status = 'done'\n      }\n      const Toast = Swal.mixin({\n        toast: true,\n        position: 'center',\n        showConfirmButton: false,\n        timer: 2000\n      })\n      Toast.fire({\n        type: 'success',\n        html: `\n        <h2 class=\"mx-3\">Moved \"${this.task.title}\" to \"${status}\" list</h2>`\n      })\n      db.collection('tasks').doc(id)\n        .update({\n          status: status\n        })\n        .then(function () {\n          console.log('Document successfully updated!')\n        })\n    },\n    left (id) {\n      let status = ''\n      if (this.task.status === 'todo') {\n        status = 'plan'\n      } else if (this.task.status === 'ongoing') {\n        status = 'todo'\n      } else if (this.task.status === 'done') {\n        status = 'ongoing'\n      }\n      const Toast = Swal.mixin({\n        toast: true,\n        position: 'center',\n        showConfirmButton: false,\n        timer: 1000\n      })\n      Toast.fire({\n        type: 'success',\n        html: `\n        <h2 class=\"mx-3\">Moved \"${this.task.title}\" to \"${status}\" list</h2>`\n      })\n      db.collection('tasks').doc(id)\n        .update({\n          status: status\n        })\n        .then(function () {\n          console.log('Document successfully updated!')\n        })\n    }\n  }\n}\n</script>\n"]}]}